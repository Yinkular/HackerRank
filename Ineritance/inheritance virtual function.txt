#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

static int prof_id, stu_id;

class Person
    {
    protected:
    string name;
    int age;
    
    public:
    Person()
        {
    }
    
   virtual void putdata()=0;
   virtual void getdata()=0;
};

class Professor:public Person
    {
    public:
    string publications;
    int curr_id;
    
    Professor()
        {
        prof_id++;
        curr_id = prof_id;
    }
   
    
    void getdata()
        {
        cin >> this->name;
        cin >> this->age;
        cin >> this->publications;
    }
    
    void putdata()
        {
        cout << this->name<<" " << this->age << " "<< this->publications <<" "<< this->curr_id<< endl;
    }
};

class Student:public Person
    {
    public:
    int *marks = new int[6];
    int curr_id;
    int total_score;
    
    Student()
        {
        total_score=0;
        stu_id++;
        curr_id = stu_id;
    }
        
    void getdata()
        {
        cin >>  this->name;
        cin >> this->age;
        
        for(int i=0;i<6;i++)
            {
            cin >> marks[i];
        }
    }
    
    
    void putdata()
        {
        
        for(int i=0;i<6;i++)
            {
            total_score+=marks[i];
        }
        cout << this->name<<" " << this->age << " " <<this->total_score<<" " << this->curr_id << endl;
    }
};

int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
